// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createCustomer = `-- name: CreateCustomer :exec
INSERT INTO VMT_Customers (Email, FullName, Birthdate) VALUES (?,?,?)
`

type CreateCustomerParams struct {
	Email     string    `json:"email"`
	Fullname  string    `json:"fullname"`
	Birthdate time.Time `json:"birthdate"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) error {
	_, err := q.db.ExecContext(ctx, createCustomer, arg.Email, arg.Fullname, arg.Birthdate)
	return err
}

const createDiscountRule = `-- name: CreateDiscountRule :exec
INSERT INTO VMT_DiscountRules 
(ID, Name, DiscountRaw, DiscountPercentual, ApplyFirst, AboveValue, BellowValue, ValidFrom, ValidUntil, Type, Code, AutoApply)
VALUES (?,?,?,?,?,?,?,?,?,?,?,?)
`

type CreateDiscountRuleParams struct {
	ID                 string         `json:"id"`
	Name               string         `json:"name"`
	Discountraw        float64        `json:"discountraw"`
	Discountpercentual float64        `json:"discountpercentual"`
	Applyfirst         string         `json:"applyfirst"`
	Abovevalue         float64        `json:"abovevalue"`
	Bellowvalue        float64        `json:"bellowvalue"`
	Validfrom          time.Time      `json:"validfrom"`
	Validuntil         time.Time      `json:"validuntil"`
	Type               string         `json:"type"`
	Code               sql.NullString `json:"code"`
	Autoapply          int32          `json:"autoapply"`
}

func (q *Queries) CreateDiscountRule(ctx context.Context, arg CreateDiscountRuleParams) error {
	_, err := q.db.ExecContext(ctx, createDiscountRule,
		arg.ID,
		arg.Name,
		arg.Discountraw,
		arg.Discountpercentual,
		arg.Applyfirst,
		arg.Abovevalue,
		arg.Bellowvalue,
		arg.Validfrom,
		arg.Validuntil,
		arg.Type,
		arg.Code,
		arg.Autoapply,
	)
	return err
}

const createItem = `-- name: CreateItem :exec
INSERT INTO VMT_Items (ID, Title, Description, IsGood, CreatedAt) VALUES (?,?,?,?,?)
`

type CreateItemParams struct {
	ID          string    `json:"id"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
	Isgood      bool      `json:"isgood"`
	Createdat   time.Time `json:"createdat"`
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) error {
	_, err := q.db.ExecContext(ctx, createItem,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Isgood,
		arg.Createdat,
	)
	return err
}

const createItemForDiscountRule = `-- name: CreateItemForDiscountRule :exec
INSERT INTO VMT_DiscountRuleItems
(DiscountRule, Item)
VALUES (?,?)
`

type CreateItemForDiscountRuleParams struct {
	Discountrule string `json:"discountrule"`
	Item         string `json:"item"`
}

func (q *Queries) CreateItemForDiscountRule(ctx context.Context, arg CreateItemForDiscountRuleParams) error {
	_, err := q.db.ExecContext(ctx, createItemForDiscountRule, arg.Discountrule, arg.Item)
	return err
}

const findActiveDiscountRules = `-- name: FindActiveDiscountRules :many
SELECT id, name, discountraw, discountpercentual, applyfirst, abovevalue, bellowvalue, validfrom, validuntil, type, code, autoapply FROM VMT_DiscountRules WHERE ValidFrom <= ? AND ValidUntil >= ?
`

type FindActiveDiscountRulesParams struct {
	Validfrom  time.Time `json:"validfrom"`
	Validuntil time.Time `json:"validuntil"`
}

func (q *Queries) FindActiveDiscountRules(ctx context.Context, arg FindActiveDiscountRulesParams) ([]VmtDiscountrule, error) {
	rows, err := q.db.QueryContext(ctx, findActiveDiscountRules, arg.Validfrom, arg.Validuntil)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []VmtDiscountrule
	for rows.Next() {
		var i VmtDiscountrule
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Discountraw,
			&i.Discountpercentual,
			&i.Applyfirst,
			&i.Abovevalue,
			&i.Bellowvalue,
			&i.Validfrom,
			&i.Validuntil,
			&i.Type,
			&i.Code,
			&i.Autoapply,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAppliedDiscountRulesForOrder = `-- name: FindAppliedDiscountRulesForOrder :many
SELECT
VMT_DiscountRules.ID DiscountRule,
VMT_DiscountRules.Name DiscountName,
VMT_DiscountRules.DiscountRaw DiscountRaw,
VMT_DiscountRules.DiscountPercentual DiscountPercentual,
VMT_DiscountRules.ApplyFirst ApplyFirst,
VMT_DiscountRules.AboveValue AboveValue,
VMT_DiscountRules.BellowValue BellowValue,
VMT_DiscountRules.ValidFrom ValidFrom,
VMT_DiscountRules.ValidUntil ValidUntil,
VMT_DiscountRules.Type DiscountType,
VMT_DiscountRules.Code DiscountCode,
VMT_DiscountRules.AutoApply AutoApply
FROM
VMT_OrderAppliedDiscounts
INNER JOIN VMT_DiscountRules ON VMT_DiscountRules.ID = VMT_OrderAppliedDiscounts.DiscountRule
WHERE VMT_OrderAppliedDiscounts.OrderID = ?
`

type FindAppliedDiscountRulesForOrderRow struct {
	Discountrule       string         `json:"discountrule"`
	Discountname       string         `json:"discountname"`
	Discountraw        float64        `json:"discountraw"`
	Discountpercentual float64        `json:"discountpercentual"`
	Applyfirst         string         `json:"applyfirst"`
	Abovevalue         float64        `json:"abovevalue"`
	Bellowvalue        float64        `json:"bellowvalue"`
	Validfrom          time.Time      `json:"validfrom"`
	Validuntil         time.Time      `json:"validuntil"`
	Discounttype       string         `json:"discounttype"`
	Discountcode       sql.NullString `json:"discountcode"`
	Autoapply          int32          `json:"autoapply"`
}

func (q *Queries) FindAppliedDiscountRulesForOrder(ctx context.Context, orderid string) ([]FindAppliedDiscountRulesForOrderRow, error) {
	rows, err := q.db.QueryContext(ctx, findAppliedDiscountRulesForOrder, orderid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindAppliedDiscountRulesForOrderRow
	for rows.Next() {
		var i FindAppliedDiscountRulesForOrderRow
		if err := rows.Scan(
			&i.Discountrule,
			&i.Discountname,
			&i.Discountraw,
			&i.Discountpercentual,
			&i.Applyfirst,
			&i.Abovevalue,
			&i.Bellowvalue,
			&i.Validfrom,
			&i.Validuntil,
			&i.Discounttype,
			&i.Discountcode,
			&i.Autoapply,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAutoAppliedDiscountsForOrder = `-- name: FindAutoAppliedDiscountsForOrder :many


SELECT Item FROM VMT_DiscountRuleItems WHERE DiscountRule = ?
`

func (q *Queries) FindAutoAppliedDiscountsForOrder(ctx context.Context, discountrule string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, findAutoAppliedDiscountsForOrder, discountrule)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var item string
		if err := rows.Scan(&item); err != nil {
			return nil, err
		}
		items = append(items, item)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAutoApplyDiscountRulesForItem = `-- name: FindAutoApplyDiscountRulesForItem :many
SELECT 
VMT_DiscountRules.ID DiscountRule,
VMT_DiscountRules.Name DiscountName,
VMT_DiscountRules.DiscountRaw DiscountRaw,
VMT_DiscountRules.DiscountPercentual DiscountPercentual,
VMT_DiscountRules.ApplyFirst ApplyFirst,
VMT_DiscountRules.AboveValue AboveValue,
VMT_DiscountRules.BellowValue BellowValue,
VMT_DiscountRules.ValidFrom ValidFrom,
VMT_DiscountRules.ValidUntil ValidUntil,
VMT_DiscountRules.Type DiscountType,
VMT_DiscountRules.Code DiscountCode,
VMT_DiscountRules.AutoApply AutoApply
FROM VMT_DiscountRuleItems
INNER JOIN VMT_DiscountRules ON VMT_DiscountRules.ID = VMT_DiscountRules.DiscountRule
WHERE Item = ? AND VMT_DiscountRules.AutoApply = 1
`

type FindAutoApplyDiscountRulesForItemRow struct {
	Discountrule       string         `json:"discountrule"`
	Discountname       string         `json:"discountname"`
	Discountraw        float64        `json:"discountraw"`
	Discountpercentual float64        `json:"discountpercentual"`
	Applyfirst         string         `json:"applyfirst"`
	Abovevalue         float64        `json:"abovevalue"`
	Bellowvalue        float64        `json:"bellowvalue"`
	Validfrom          time.Time      `json:"validfrom"`
	Validuntil         time.Time      `json:"validuntil"`
	Discounttype       string         `json:"discounttype"`
	Discountcode       sql.NullString `json:"discountcode"`
	Autoapply          int32          `json:"autoapply"`
}

func (q *Queries) FindAutoApplyDiscountRulesForItem(ctx context.Context, item string) ([]FindAutoApplyDiscountRulesForItemRow, error) {
	rows, err := q.db.QueryContext(ctx, findAutoApplyDiscountRulesForItem, item)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindAutoApplyDiscountRulesForItemRow
	for rows.Next() {
		var i FindAutoApplyDiscountRulesForItemRow
		if err := rows.Scan(
			&i.Discountrule,
			&i.Discountname,
			&i.Discountraw,
			&i.Discountpercentual,
			&i.Applyfirst,
			&i.Abovevalue,
			&i.Bellowvalue,
			&i.Validfrom,
			&i.Validuntil,
			&i.Discounttype,
			&i.Discountcode,
			&i.Autoapply,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findCustomer = `-- name: FindCustomer :one
SELECT email, fullname, birthdate FROM VMT_Customers WHERE Email = ?
`

func (q *Queries) FindCustomer(ctx context.Context, email string) (VmtCustomer, error) {
	row := q.db.QueryRowContext(ctx, findCustomer, email)
	var i VmtCustomer
	err := row.Scan(&i.Email, &i.Fullname, &i.Birthdate)
	return i, err
}

const findCustomerOrders = `-- name: FindCustomerOrders :many
SELECT
VMT_Orders.ID OrderId,
VMT_Customers.Email CustomerEmail,
VMT_Customers.FullName CustomerFullName,
VMT_Customers.Birthdate CustomerBirthdate,
VMT_Orders.Customer Customer,
VMT_Orders.Price OrderPrice,
VMT_Orders.PaymentMethod PaymentMethod,
VMT_Orders.Status OrderStatus,
VMT_Orders.DiscountRaw DiscountRaw,
VMT_Orders.DiscountPercentual DiscountPercentual,
VMT_Items.ID ItemID,
VMT_Items.Title ItemTitle,
VMT_Items.Description ItemDescription,
VMT_Items.IsGood ItemIsGood,
VMT_Items.CreatedAt ItemCreatedAt,
VMT_Items.Category ItemCategory,
VMT_ItemCategories.ID ItemCategoryId,
VMT_ItemCategories.Name ItemCategoryName,
VMT_ItemsValuation.LastPrice ItemPrice,
VMT_ItemsValuation.LastCost ItemCost,
VMT_ItemsValuation.UpdatedAt ValuationUpdatedAt,
VMT_OrderDetails.Quantity DetailQuantity,
VMT_OrderDetails.DiscountPercentual ItemDiscountPercentual,
VMT_OrderDetails.DiscountRaw ItemDiscountRaw
FROM VMT_OrderDetails
INNER JOIN VMT_Customers ON VMT_Customers.Email = VMT_Orders.Customer 
INNER JOIN VMT_Items ON VMT_Items.ID = VMT_OrderDetails.Item
INNER JOIN VMT_ItemCategories ON VMT_ItemCategories.ID = VMTItems.Category
INNER JOIN VMT_ItemsValuation ON VMT_ItemsValuation.ItemID = VMT_Items.ID
INNER JOIN VMT_Orders ON VMT_Orders.ID = VMT_OrderDetails.OrderID
WHERE VMT_Customers.Email = ? ORDER BY VMT_Orders.ID
`

type FindCustomerOrdersRow struct {
	Orderid                string    `json:"orderid"`
	Customeremail          string    `json:"customeremail"`
	Customerfullname       string    `json:"customerfullname"`
	Customerbirthdate      time.Time `json:"customerbirthdate"`
	Customer               string    `json:"customer"`
	Orderprice             float64   `json:"orderprice"`
	Paymentmethod          int32     `json:"paymentmethod"`
	Orderstatus            int32     `json:"orderstatus"`
	Discountraw            float64   `json:"discountraw"`
	Discountpercentual     float64   `json:"discountpercentual"`
	Itemid                 string    `json:"itemid"`
	Itemtitle              string    `json:"itemtitle"`
	Itemdescription        string    `json:"itemdescription"`
	Itemisgood             bool      `json:"itemisgood"`
	Itemcreatedat          time.Time `json:"itemcreatedat"`
	Itemcategory           int32     `json:"itemcategory"`
	Itemcategoryid         int32     `json:"itemcategoryid"`
	Itemcategoryname       string    `json:"itemcategoryname"`
	Itemprice              float64   `json:"itemprice"`
	Itemcost               float64   `json:"itemcost"`
	Valuationupdatedat     time.Time `json:"valuationupdatedat"`
	Detailquantity         int32     `json:"detailquantity"`
	Itemdiscountpercentual float64   `json:"itemdiscountpercentual"`
	Itemdiscountraw        float64   `json:"itemdiscountraw"`
}

func (q *Queries) FindCustomerOrders(ctx context.Context, email string) ([]FindCustomerOrdersRow, error) {
	rows, err := q.db.QueryContext(ctx, findCustomerOrders, email)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindCustomerOrdersRow
	for rows.Next() {
		var i FindCustomerOrdersRow
		if err := rows.Scan(
			&i.Orderid,
			&i.Customeremail,
			&i.Customerfullname,
			&i.Customerbirthdate,
			&i.Customer,
			&i.Orderprice,
			&i.Paymentmethod,
			&i.Orderstatus,
			&i.Discountraw,
			&i.Discountpercentual,
			&i.Itemid,
			&i.Itemtitle,
			&i.Itemdescription,
			&i.Itemisgood,
			&i.Itemcreatedat,
			&i.Itemcategory,
			&i.Itemcategoryid,
			&i.Itemcategoryname,
			&i.Itemprice,
			&i.Itemcost,
			&i.Valuationupdatedat,
			&i.Detailquantity,
			&i.Itemdiscountpercentual,
			&i.Itemdiscountraw,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findItem = `-- name: FindItem :one
SELECT id, title, description, isgood, createdat, category, itemid, lastprice, lastcost, updatedat FROM VMT_Items 
INNER JOIN VMT_ItemsValuation ON VMT_ItemsValuation.ItemID = VMT_Items.ID
WHERE ID = ?
`

type FindItemRow struct {
	ID          string    `json:"id"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
	Isgood      bool      `json:"isgood"`
	Createdat   time.Time `json:"createdat"`
	Category    int32     `json:"category"`
	Itemid      string    `json:"itemid"`
	Lastprice   float64   `json:"lastprice"`
	Lastcost    float64   `json:"lastcost"`
	Updatedat   time.Time `json:"updatedat"`
}

func (q *Queries) FindItem(ctx context.Context, id string) (FindItemRow, error) {
	row := q.db.QueryRowContext(ctx, findItem, id)
	var i FindItemRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Isgood,
		&i.Createdat,
		&i.Category,
		&i.Itemid,
		&i.Lastprice,
		&i.Lastcost,
		&i.Updatedat,
	)
	return i, err
}

const findItemCostHistory = `-- name: FindItemCostHistory :many
SELECT item, price, valuationtype, valorizatedat FROM VMT_ItemValuationLog WHERE Item = ? AND Type = 'Cost'
`

func (q *Queries) FindItemCostHistory(ctx context.Context, item string) ([]VmtItemvaluationlog, error) {
	rows, err := q.db.QueryContext(ctx, findItemCostHistory, item)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []VmtItemvaluationlog
	for rows.Next() {
		var i VmtItemvaluationlog
		if err := rows.Scan(
			&i.Item,
			&i.Price,
			&i.Valuationtype,
			&i.Valorizatedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findItemPriceHistory = `-- name: FindItemPriceHistory :many
SELECT item, price, valuationtype, valorizatedat FROM VMT_ItemValuationLog WHERE Item = ? AND Type = 'Price'
`

func (q *Queries) FindItemPriceHistory(ctx context.Context, item string) ([]VmtItemvaluationlog, error) {
	rows, err := q.db.QueryContext(ctx, findItemPriceHistory, item)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []VmtItemvaluationlog
	for rows.Next() {
		var i VmtItemvaluationlog
		if err := rows.Scan(
			&i.Item,
			&i.Price,
			&i.Valuationtype,
			&i.Valorizatedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findOrder = `-- name: FindOrder :many
SELECT
VMT_Orders.ID OrderID,
VMT_Orders.Price OrderPrice,
VMT_Orders.PaymentMethod OrderPaymentMethod,
VMT_Orders.Status OrderStatus,
VMT_Orders.DiscountRaw OrderDiscountRaw,
VMT_Orders.DiscountPercentual OrderDiscountPercentual,
VMT_Customers.Email CustomerEmail,
VMT_Customers.FullName CustomerFullName,
VMT_Customers.Birthdate CustomerBirthdate,
VMT_Items.ID ItemID,
VMT_Items.Category ItemCategory,
VMT_Items.Title ItemTitle,
VMT_Items.Description ItemDescription,
VMT_Items.IsGood ItemIsGood,
VMT_Items.CreatedAt ItemCreatedAt,
VMT_ItemCategories.ID ItemCategoryId,
VMT_ItemCategories.Name ItemCategoryName,
VMT_ItemsValuation.LastPrice ItemPrice,
VMT_ItemsValuation.LastCost ItemCost,
VMT_ItemsValuation.UpdatedAt ValuationUpdatedAt,
VMT_OrderDetails.Quantity DetailQuantity,
VMT_OrderDetails.DiscountPercentual ItemDiscountPercentual,
VMT_OrderDetails.DiscountRaw ItemDiscountRaw
FROM VMT_Orders 
INNER JOIN VMT_Customers on VMT_Customers.Email = VMT_Orders.Customer 
INNER JOIN VMT_OrderDetails ON VMT_OrderDetails.OrderID = VMT_Orders.ID 
INNER JOIN VMT_Items ON VMT_Items.ID = VMT_OrderDetails.Item
INNER JOIN VMT_ItemCategories ON VMT_ItemCategories.ID = VMTItems.Category
INNER JOIN VMT_ItemsValuation ON VMT_ItemsValuation.ItemID = VMT_Items.ID
WHERE VMT_Orders.ID = ?
`

type FindOrderRow struct {
	Orderid                 string    `json:"orderid"`
	Orderprice              float64   `json:"orderprice"`
	Orderpaymentmethod      int32     `json:"orderpaymentmethod"`
	Orderstatus             int32     `json:"orderstatus"`
	Orderdiscountraw        float64   `json:"orderdiscountraw"`
	Orderdiscountpercentual float64   `json:"orderdiscountpercentual"`
	Customeremail           string    `json:"customeremail"`
	Customerfullname        string    `json:"customerfullname"`
	Customerbirthdate       time.Time `json:"customerbirthdate"`
	Itemid                  string    `json:"itemid"`
	Itemcategory            int32     `json:"itemcategory"`
	Itemtitle               string    `json:"itemtitle"`
	Itemdescription         string    `json:"itemdescription"`
	Itemisgood              bool      `json:"itemisgood"`
	Itemcreatedat           time.Time `json:"itemcreatedat"`
	Itemcategoryid          int32     `json:"itemcategoryid"`
	Itemcategoryname        string    `json:"itemcategoryname"`
	Itemprice               float64   `json:"itemprice"`
	Itemcost                float64   `json:"itemcost"`
	Valuationupdatedat      time.Time `json:"valuationupdatedat"`
	Detailquantity          int32     `json:"detailquantity"`
	Itemdiscountpercentual  float64   `json:"itemdiscountpercentual"`
	Itemdiscountraw         float64   `json:"itemdiscountraw"`
}

func (q *Queries) FindOrder(ctx context.Context, id string) ([]FindOrderRow, error) {
	rows, err := q.db.QueryContext(ctx, findOrder, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindOrderRow
	for rows.Next() {
		var i FindOrderRow
		if err := rows.Scan(
			&i.Orderid,
			&i.Orderprice,
			&i.Orderpaymentmethod,
			&i.Orderstatus,
			&i.Orderdiscountraw,
			&i.Orderdiscountpercentual,
			&i.Customeremail,
			&i.Customerfullname,
			&i.Customerbirthdate,
			&i.Itemid,
			&i.Itemcategory,
			&i.Itemtitle,
			&i.Itemdescription,
			&i.Itemisgood,
			&i.Itemcreatedat,
			&i.Itemcategoryid,
			&i.Itemcategoryname,
			&i.Itemprice,
			&i.Itemcost,
			&i.Valuationupdatedat,
			&i.Detailquantity,
			&i.Itemdiscountpercentual,
			&i.Itemdiscountraw,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findValidDiscountRulesForItem = `-- name: FindValidDiscountRulesForItem :many
SELECT discountrule, item, id, name, discountraw, discountpercentual, applyfirst, abovevalue, bellowvalue, validfrom, validuntil, type, code, autoapply FROM VMT_DiscountRuleItems
INNER JOIN VMT_DiscountRules ON VMT_DiscountRules.ID = VMT_DiscountRuleItems.DiscountRule
WHERE VMT_DiscountRuleItems.Item = ?
AND VMT_DiscountRules.ValidFrom >= ? AND VMT_DiscountRules.ValidUntil <= ?
AND VMT_DiscountRules.AboveValue >= ? AND VMT_DiscountRules.BellowValue <= ?
ORDER BY VMT_DiscountRules.ID
`

type FindValidDiscountRulesForItemParams struct {
	Item        string    `json:"item"`
	Validfrom   time.Time `json:"validfrom"`
	Validuntil  time.Time `json:"validuntil"`
	Abovevalue  float64   `json:"abovevalue"`
	Bellowvalue float64   `json:"bellowvalue"`
}

type FindValidDiscountRulesForItemRow struct {
	Discountrule       string         `json:"discountrule"`
	Item               string         `json:"item"`
	ID                 string         `json:"id"`
	Name               string         `json:"name"`
	Discountraw        float64        `json:"discountraw"`
	Discountpercentual float64        `json:"discountpercentual"`
	Applyfirst         string         `json:"applyfirst"`
	Abovevalue         float64        `json:"abovevalue"`
	Bellowvalue        float64        `json:"bellowvalue"`
	Validfrom          time.Time      `json:"validfrom"`
	Validuntil         time.Time      `json:"validuntil"`
	Type               string         `json:"type"`
	Code               sql.NullString `json:"code"`
	Autoapply          int32          `json:"autoapply"`
}

func (q *Queries) FindValidDiscountRulesForItem(ctx context.Context, arg FindValidDiscountRulesForItemParams) ([]FindValidDiscountRulesForItemRow, error) {
	rows, err := q.db.QueryContext(ctx, findValidDiscountRulesForItem,
		arg.Item,
		arg.Validfrom,
		arg.Validuntil,
		arg.Abovevalue,
		arg.Bellowvalue,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindValidDiscountRulesForItemRow
	for rows.Next() {
		var i FindValidDiscountRulesForItemRow
		if err := rows.Scan(
			&i.Discountrule,
			&i.Item,
			&i.ID,
			&i.Name,
			&i.Discountraw,
			&i.Discountpercentual,
			&i.Applyfirst,
			&i.Abovevalue,
			&i.Bellowvalue,
			&i.Validfrom,
			&i.Validuntil,
			&i.Type,
			&i.Code,
			&i.Autoapply,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findValidDiscountRulesForOrder = `-- name: FindValidDiscountRulesForOrder :many
SELECT id, name, discountraw, discountpercentual, applyfirst, abovevalue, bellowvalue, validfrom, validuntil, type, code, autoapply FROM VMT_DiscountRules
WHERE VMT_DiscountRules.AboveValue >= ? AND BellowValue <= ? 
AND VMT_DiscountRules.ValidFrom <= ? AND VMT_DiscountRules.ValidUntil >= ?
`

type FindValidDiscountRulesForOrderParams struct {
	Abovevalue  float64   `json:"abovevalue"`
	Bellowvalue float64   `json:"bellowvalue"`
	Validfrom   time.Time `json:"validfrom"`
	Validuntil  time.Time `json:"validuntil"`
}

func (q *Queries) FindValidDiscountRulesForOrder(ctx context.Context, arg FindValidDiscountRulesForOrderParams) ([]VmtDiscountrule, error) {
	rows, err := q.db.QueryContext(ctx, findValidDiscountRulesForOrder,
		arg.Abovevalue,
		arg.Bellowvalue,
		arg.Validfrom,
		arg.Validuntil,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []VmtDiscountrule
	for rows.Next() {
		var i VmtDiscountrule
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Discountraw,
			&i.Discountpercentual,
			&i.Applyfirst,
			&i.Abovevalue,
			&i.Bellowvalue,
			&i.Validfrom,
			&i.Validuntil,
			&i.Type,
			&i.Code,
			&i.Autoapply,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findValidItemsForDiscountRuleDetailed = `-- name: FindValidItemsForDiscountRuleDetailed :many
SELECT 
VMT_Items.ID ItemID,
VMT_Items.Title ItemTitle,
VMT_Items.Description ItemDescription,
VMT_Items.IsGood ItemIsGood,
VMT_Items.CreatedAt ItemCreatedAt,
VMT_Items.Category ItemCategory,
VMT_ItemsValuation.LastPrice LastPrice,
VMT_ItemsValuation.LastCost LastCost,
VMT_ItemsValuation.UpdatedAt PriceUpdatedAt
FROM VMT_DiscountRuleItems
INNER JOIN VMT_Items ON VMT_Items.ID = VMT_DiscountRuleItems.Item
INNER JOIN VMT_ItemsValuation ON VMT_ItemsValuation.ItemID = VMT_DiscountRuleItems.Item
WHERE DiscountRule = ?
`

type FindValidItemsForDiscountRuleDetailedRow struct {
	Itemid          string    `json:"itemid"`
	Itemtitle       string    `json:"itemtitle"`
	Itemdescription string    `json:"itemdescription"`
	Itemisgood      bool      `json:"itemisgood"`
	Itemcreatedat   time.Time `json:"itemcreatedat"`
	Itemcategory    int32     `json:"itemcategory"`
	Lastprice       float64   `json:"lastprice"`
	Lastcost        float64   `json:"lastcost"`
	Priceupdatedat  time.Time `json:"priceupdatedat"`
}

func (q *Queries) FindValidItemsForDiscountRuleDetailed(ctx context.Context, discountrule string) ([]FindValidItemsForDiscountRuleDetailedRow, error) {
	rows, err := q.db.QueryContext(ctx, findValidItemsForDiscountRuleDetailed, discountrule)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindValidItemsForDiscountRuleDetailedRow
	for rows.Next() {
		var i FindValidItemsForDiscountRuleDetailedRow
		if err := rows.Scan(
			&i.Itemid,
			&i.Itemtitle,
			&i.Itemdescription,
			&i.Itemisgood,
			&i.Itemcreatedat,
			&i.Itemcategory,
			&i.Lastprice,
			&i.Lastcost,
			&i.Priceupdatedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateItemValorization = `-- name: UpdateItemValorization :exec
UPDATE VMT_ItemsValuation SET LastPrice = ?, LastCost = ?, UpdatedAt = ? WHERE ItemID = ?
`

type UpdateItemValorizationParams struct {
	Lastprice float64   `json:"lastprice"`
	Lastcost  float64   `json:"lastcost"`
	Updatedat time.Time `json:"updatedat"`
	Itemid    string    `json:"itemid"`
}

func (q *Queries) UpdateItemValorization(ctx context.Context, arg UpdateItemValorizationParams) error {
	_, err := q.db.ExecContext(ctx, updateItemValorization,
		arg.Lastprice,
		arg.Lastcost,
		arg.Updatedat,
		arg.Itemid,
	)
	return err
}

const updateOrderStatus = `-- name: UpdateOrderStatus :exec
UPDATE VMT_Orders SET Status = ? WHERE ID = ?
`

type UpdateOrderStatusParams struct {
	Status int32  `json:"status"`
	ID     string `json:"id"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateOrderStatus, arg.Status, arg.ID)
	return err
}
